<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Arch系linux静态ip设置与固定</title>
      <link href="/2020/042829861.html"/>
      <url>/2020/042829861.html</url>
      
        <content type="html"><![CDATA[<p>在arch系统的安装过程中,我因为个人的网络环境而有设置静态ip的需求，因而没有选用<code>dhcpcd</code>服务来获取动态ip</p><p>在此记录设置静态ip过程中的思路与一些工具的使用，还有永久固定静态ip的方法</p><hr><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="排查网络连接问题"><a href="#排查网络连接问题" class="headerlink" title="排查网络连接问题"></a>排查网络连接问题</h3><pre><code>1. 网络接口网卡设备可见且已经启用     1. ip link    2. ip link set 网卡名 up2. 已经连接到网络. 网线已经接好 或者已经连接到无线局域网3. 网络接口设备拥有一个ip地址4. 路由表设置正确 6. 可以ping通一个本地ip地址 例如默认网关7. 可以ping通一个公网ip地址 例如8.8.8.8 谷歌的DNS服务器8. 检查是否能解析域名 例如baidu.com</code></pre><h3 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h3><p><code>ping</code>用于测试是否可以连接到某个主机</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ping</span> www.example.comPING www.example.com <span class="token punctuation">(</span>93.184.216.34<span class="token punctuation">)</span>: 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> data bytes64 bytes from 93.184.216.34: icmp_seq<span class="token operator">=</span>0 ttl<span class="token operator">=</span>56 time<span class="token operator">=</span>11.632 ms64 bytes from 93.184.216.34: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>56 time<span class="token operator">=</span>11.726 ms64 bytes from 93.184.216.34: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>56 time<span class="token operator">=</span>10.683 ms<span class="token punctuation">..</span>.</code></pre><p>如果没有收到回应，原因可能与你的默认网关配置或者你的网络接入服务商（ISP）有关。</p><h3 id="iproute2使用"><a href="#iproute2使用" class="headerlink" title="iproute2使用"></a>iproute2使用</h3><p><code>iproute2</code> 是 <code>base</code> 元包 的依赖，提供 ip 命令行接口，用于管理 网络接口，IP 地址 和 路由表。注意使用 ip 进行的配置会在重启后丢失。要进行永久配置，可以使用 网络管理器 或通过脚本和 systemd 单元 使 ip 命令自动化。同时需要注意的是 ip 命令通常能够缩写，为了清楚起见，本文对其进行了详细说明。</p><h4 id="网络接口"><a href="#网络接口" class="headerlink" title="网络接口"></a>网络接口</h4><p>默认情况下， udev 使用 可预测的网络接口名称 分配给你的网络接口，该名称以 en (有线/以太网) ，wl (无线/WLAN) 或 ww (WWAN) 。</p><h5 id="列出网络接口"><a href="#列出网络接口" class="headerlink" title="列出网络接口"></a>列出网络接口</h5><p>有线和无线接口名称都可以通过 <code>ls /sys/class/net</code> 或 <code>ip link</code> 找到。要注意的是 lo 是 Loop 设备 ，不被用于建立网络连接。</p><h5 id="启用禁用网络接口"><a href="#启用禁用网络接口" class="headerlink" title="启用禁用网络接口"></a>启用禁用网络接口</h5><pre class=" language-bash"><code class="language-bash">ip <span class="token function">link</span> <span class="token keyword">set</span> <span class="token string">'interface'</span>网络接口名 up<span class="token operator">|</span>down</code></pre><p>启用与禁用网络接口</p><h5 id="列出IP地址"><a href="#列出IP地址" class="headerlink" title="列出IP地址"></a>列出IP地址</h5><pre class=" language-bash"><code class="language-bash">ip address show</code></pre><h5 id="将IP地址添加到接口"><a href="#将IP地址添加到接口" class="headerlink" title="将IP地址添加到接口"></a>将IP地址添加到接口</h5><pre class=" language-bash"><code class="language-bash">ip address add address地址/prefix_len子网掩码长度 broadcast 广播范围 + dev interface网络接口</code></pre><p><code>+</code> 是使 ip 从 IP 地址和子网掩码派生 broadcast address 的特殊符号</p><p>例如<code>ip address add 192.168.3.18/24 broadcast 192.168.3.255 dev wlo1</code><br>或<code>ip address add 192.168.3.18/24 broadcast + dev wlo1</code><br><code>address</code>可缩写为<code>addr</code><br>实际操作中省略广播貌似可行</p><h5 id="将IP地址从接口中删除"><a href="#将IP地址从接口中删除" class="headerlink" title="将IP地址从接口中删除"></a>将IP地址从接口中删除</h5><pre class=" language-bash"><code class="language-bash">ip address del address/prefix_len dev interface</code></pre><p><em>删除某个特定接口的地址</em></p><pre class=" language-bash"><code class="language-bash">ip address flush dev interface</code></pre><h5 id="列出路由表"><a href="#列出路由表" class="headerlink" title="列出路由表"></a>列出路由表</h5><p>列出<code>IPV4</code>路由</p><pre class=" language-bash"><code class="language-bash">ip route show</code></pre><p>列出<code>IPV6</code>路由</p><pre class=" language-bash"><code class="language-bash">ip -6 route</code></pre><h5 id="添加路由表-即网关"><a href="#添加路由表-即网关" class="headerlink" title="添加路由表,即网关"></a>添加路由表,即网关</h5><pre class=" language-bash"><code class="language-bash">ip route add PREFIX via address dev interface</code></pre><p>一般默认<code>PREFIX</code>为<code>default</code><br>例如</p><pre class=" language-bash"><code class="language-bash">ip route add default via 192.168.3.1 dev wlo1</code></pre><p>网关ip一般为<code>网段.1</code>或<code>网段.254</code></p><h5 id="删除路由表"><a href="#删除路由表" class="headerlink" title="删除路由表"></a>删除路由表</h5><pre class=" language-bash"><code class="language-bash">ip route del PREFIX via address dev interface</code></pre><p>删除某接口所有路由表</p><pre class=" language-bash"><code class="language-bash">ip route flush dev wlo1</code></pre><hr><p>现在我们正式开始设置静态ip</p><h2 id="手动设置静态IP地址"><a href="#手动设置静态IP地址" class="headerlink" title="手动设置静态IP地址"></a>手动设置静态IP地址</h2><pre class=" language-bash"><code class="language-bash">ip address add 192.168.3.18/24 broadcast 192.168.3.255 dev wlo1ip route add defalut via 192.168.3.254 dev wlo1</code></pre><p>编辑<code>/etc/resolv.conf</code><br>添加DNS服务器</p><pre class=" language-text"><code class="language-text">nameserver 192.168.3.254</code></pre><p>也可改为一些公共dns</p><hr><h2 id="永久固定ip"><a href="#永久固定ip" class="headerlink" title="永久固定ip"></a>永久固定ip</h2><p>每次重启都得手动执行命令就显得有些麻烦。因此通过系统服务与脚本来固定ip地址</p><p>首先先为<code>systemd</code>服务创建一个网络设定的配置<br>以网络接口设备名取代以下的<code>interface</code></p><pre class=" language-bash"><code class="language-bash">vim /etc/conf.d/network@interface--------------------------------address<span class="token operator">=</span>192.168.3.18netmask<span class="token operator">=</span>24broadcast<span class="token operator">=</span>192.168.3.255gateway<span class="token operator">=</span>192.168.3.254</code></pre><p>具体ip与网关根据个人设置</p><p>建立<code>systemd unit</code>档案</p><pre class=" language-bash"><code class="language-bash">vim /etc/systemd/system/network@.service---------------------------------------<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>Network connectivity <span class="token punctuation">(</span>%i<span class="token punctuation">)</span>Wants<span class="token operator">=</span>network.targetBefore<span class="token operator">=</span>network.targetBindsTo<span class="token operator">=</span>sys-subsystem-net-devices-%i.deviceAfter<span class="token operator">=</span>sys-subsystem-net-devices-%i.device<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Type<span class="token operator">=</span>oneshotRemainAfterExit<span class="token operator">=</span>yesEnvironmentFile<span class="token operator">=</span>/etc/conf.d/network@%iExecStart<span class="token operator">=</span>/usr/bin/ip <span class="token function">link</span> <span class="token keyword">set</span> dev %i upExecStart<span class="token operator">=</span>/usr/bin/ip addr add <span class="token variable">${address}</span>/<span class="token variable">${netmask}</span> broadcast <span class="token variable">${broadcast}</span> dev %iExecStart<span class="token operator">=</span>/usr/bin/sh -c <span class="token string">'test -n <span class="token variable">${gateway}</span> &amp;&amp; /usr/bin/ip route add default via <span class="token variable">${gateway}</span>'</span>ExecStop<span class="token operator">=</span>/usr/bin/ip addr flush dev %iExecStop<span class="token operator">=</span>/usr/bin/ip <span class="token function">link</span> <span class="token keyword">set</span> dev %i down<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target</code></pre><p>启用该<code>unit</code>并将其启用，加入网络接口名称</p><pre class=" language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> network@网络接口.servicesystemctl start network@网络接口.service</code></pre><hr><p>至此结束</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Arch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux安装全记录(未完更新）</title>
      <link href="/2020/042818729.html"/>
      <url>/2020/042818729.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>尽管许多事情压迫的自己十分痛苦，但是爱折腾的心还是更胜一筹，只有在折腾这些乱七八糟的东西的时候才能获得片刻的宁静，能够专心的做一件事情。<br>使用<code>arch</code>系衍生发行版<code>manjaro</code>已经有蛮长的几个月时间，其实心里一直对那神奇的<code>arch</code>十分好奇。因为在使用manjaro的过程中从arch的论坛和wiki中都获得了很多的信息。但是还是碍于道听途说的安装过程的困难让我有些害怕，因为电脑上已经装了win和黑苹果，怕半吊子的对引导的了解将整台电脑都折腾坏。毕竟当时安装黑苹果时，引导问题就吃了一个大亏，将电脑中所有的资料都付之一炬。<br>所以还是打算在manjaro上多摸爬滚打一段时间。<br>前几天，折腾之心难以平静，又很是想体验一下arch能否有更为流畅爽快的体验，因此照着教程与wiki就先在虚拟机里试了几次手。感觉搞明白了一些具体流程之后，又向别人确认了引导问题应该不会出错，于是实体机上的<code>折腾</code>开始了。</p><p>在此记录折腾的全过程，留作以后的参考</p><hr><h2 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h2><h3 id="验证签名"><a href="#验证签名" class="headerlink" title="验证签名"></a>验证签名</h3><p>安装文件可以从<a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">download</a>页面获取,同时获取<code>GnuPG</code>签名</p><p>在一台已经安装 GnuPG 的系统上，通过下载 PGP 签名 (under Checksums) 到 ISO 文件所在的路径，可以通过以下方式验证：</p><pre class=" language-bash"><code class="language-bash"> $ gpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig</code></pre><p>另外在另一台已经安装<code>Arch Linux</code>的计算机上可通过以下方式验证<br>manjaro也可以</p><pre class=" language-bash"><code class="language-bash">$ pacman-key -v archlinux-version-x86_64.iso.sig</code></pre><h2 id="启动到live环境"><a href="#启动到live环境" class="headerlink" title="启动到live环境"></a>启动到live环境</h2><p>windows下可以用rufus刻录启动盘</p><hr><p>linux用<code>dd</code>命令<br>警告: 这种方法会删除 /dev/sdx 上的所有数据且不可逆。要在使用 Arch ISO 之后释放空间，还原 USB 为原始状态，需要以 root 权限执行wipefs –all /dev/sdx 命令删除 iso9660 文件系统标记，然后再 重新分区 和 重新格式化 USB。<br>用<code>lsblk</code>找到U盘并确保<code>没有</code>挂载<br>用U盘替换 <code>/dev/sdx</code>，如 <code>/dev/sdb</code>。（不要加上数字，也就是说，不要键入 <code>/dev/sdb1</code> 之类的东西)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">dd</span> bs-4N if<span class="token operator">=</span>/path/to/archlinux.iso of<span class="token operator">=</span>/dev/sdx status<span class="token operator">=</span>progress <span class="token operator">&amp;&amp;</span> <span class="token function">sync</span></code></pre><p>请等待 sync 完成，所有数据都写入之后再拔掉 U 盘。</p><hr><p>其实也可在<code>manjaro</code>下挂载最新的 Arch Linux 安装介质并 chroot 是可能的。这种方法为当前系统提供了可运作的 Arch Linux 安装程序而无需另外准备。</p><p>注意: 开始前，确保最近版本的 squashfs 已安装。否则会出现诸如 FATAL ERROR aborting: uncompress_inode_table: failed to read block的错误信息。</p><p>依据构架的不同，根镜像能在镜像站的 arch/x86_64/ 或 arch/i686/ 目录下找到。squashfs 格式无法编辑，因此需要解压出根镜像并挂载。</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso" target="_blank" rel="noopener">清华源下载地址</a> /arch/x86_64目录下<br>解压运行</p><pre class=" language-bash"><code class="language-bash">unsquashfs -d /squashfs<span class="token operator">=</span>root root-image.fs.sfs</code></pre><p>以<code>loop</code>挂载根镜像</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /arch<span class="token function">mount</span> -o loop /squashfs-root/root-image.fs /arch</code></pre><p><code>chroot</code>前需设置挂载点并为网络连接复制<code>resolv.conf</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">mount</span> -t proc none /arch/proc<span class="token function">mount</span> -t sysfs none /arch/sys<span class="token function">mount</span> -o bind /dev /arch/dev<span class="token function">mount</span> -o bind /dev/pts /arch/dev/pts <span class="token comment" spellcheck="true"># pacman 所需（用于签名检查）</span><span class="token function">cp</span> -L /etc/resolv.conf /arch/etc <span class="token comment" spellcheck="true"># 网络连接所需</span></code></pre><p>准备完毕，chroot进入新系统</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chroot</span> /arch <span class="token function">bash</span></code></pre><p>使用 chroot 环境<br>初始化 pacman 密匙环<br>开始安装前，需要设置 pacman 密匙</p><pre class=" language-bash"><code class="language-bash">pacman-key --initpacman-key --populate archlinux</code></pre><hr><p>此处继续liveCD的u盘安装</p><p>首先确认引导类型，我以EFI的方式引导</p><p>开机以U盘启动</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>进入选择界面后选择<code>Boot Arch Linux</code>进入<br>硬件检测后进入系统</p><h3 id="终端字体"><a href="#终端字体" class="headerlink" title="终端字体"></a>终端字体</h3><pre class=" language-bash"><code class="language-bash">setfonts /usr/share/kbd/consolefonts/LatGrkCyr-12x22.psfu.gz</code></pre><h3 id="键盘布局修改"><a href="#键盘布局修改" class="headerlink" title="键盘布局修改"></a>键盘布局修改</h3><p><em>控制台键盘布局</em>默认为<code>us</code>美式键盘映射。 列出所有可用键盘布局，可使用:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> /usr/share/kbd/keymaps/**/*.map.gz</code></pre><p>如果您想要更改键盘布局，可以将一致的文件名添加进 loadkeys(1)，但请省略路径和扩展名。比如，要添加 German 键盘布局：</p><pre class=" language-bash"><code class="language-bash">loadkeys de-latin1</code></pre><p>此处我只是想交换键盘的<code>CapsLock</code>与<code>Ese</code><br>可新建<code>keyloads.conf</code></p><pre class=" language-bash"><code class="language-bash">vim keyloads.conf</code></pre><p>添加内容</p><pre class=" language-text"><code class="language-text">keycode 1 = Caps_Lockkeycode 58 = Escape</code></pre><p>执行</p><pre class=" language-bash"><code class="language-bash">loadkeys keyloads.conf</code></pre><h3 id="验证启动模式"><a href="#验证启动模式" class="headerlink" title="验证启动模式"></a>验证启动模式</h3><p>如果以在 UEFI 主板上启用 UEFI 模式，Archiso 将会使用 systemd-boot 来 启动 Arch Linux。可以列出 efivars 目录以验证启动模式：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> /sys/firmware/efi/efivars</code></pre><p>如果目录不存在，系统可能以 BIOS 或 CSM 模式启动，详见您的主板手册。</p><h3 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h3><p>用下面步骤设置网络</p><p>1.确保系统已经启用了 网络接口，用 <code>ip-link</code> 检查:</p><pre class=" language-bash"><code class="language-bash">ip <span class="token function">link</span></code></pre><p>如果有线网卡或无线网卡并未启用,则执行</p><pre class=" language-bash"><code class="language-bash">ip <span class="token function">link</span> <span class="token keyword">set</span> 网卡名 up</code></pre><p>2.连接到网络，连接<code>网线</code>或<code>无线网络</code></p><ol><li><p>网线</p><pre class=" language-bash"><code class="language-bash">systecmtl start dhcpcd.service</code></pre><p>这样就已经联网了</p></li><li><p>无线网络</p><p>扫描可用的<code>wifi</code></p><pre class=" language-bash"><code class="language-bash">iwlist 无线网卡名 scan <span class="token operator">|</span> <span class="token function">grep</span> EESID</code></pre><p><code>wpa_passphrase</code>生成<code>wpa_supplicant</code>所需的最小配置</p><pre class=" language-bash"><code class="language-bash">wpa_passphrase wifi名 密码 <span class="token operator">></span> internet.conf</code></pre><p><code>wpa_supplicant</code>连接上</p><pre class=" language-bash"><code class="language-bash">wpa_supplicant -c internet.conf -i 网卡名 <span class="token operator">&amp;</span></code></pre><p><code>&amp;</code>表示后台运行</p><pre class=" language-bash"><code class="language-bash">systemctl start dhcpcd.service <span class="token comment" spellcheck="true"># 获得动态ip</span></code></pre><ol start="3"><li>有静态ip设置需求的话,请看另一篇<a href="/2020/042829861.html">静态ip的设置方法</a></li></ol></li></ol><ol start="4"><li>用<code>ping</code>检查网络连接</li></ol><h3 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h3><pre class=" language-bash"><code class="language-bash">timedatectl set-ntp <span class="token boolean">true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Arch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下最佳显卡解决方案</title>
      <link href="/2020/042864418.html"/>
      <url>/2020/042864418.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>bumblebee 的 optirun 的兼容性问题； primusrun 关垂直同步的画面撕裂，开垂直同步的输入延迟；直接使用 NVIDIA 的耗电等一系列双显卡之痛之后，发现 optimus-manager 十分适合。可以设置开机默认使用 Intel 还是 Nvidia ，可以随时在这两者之间切换。</p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装前须知: <code>optimus-manager</code> 上游直接支持的<em>Display Manager</em>为 <code>sddm</code> 、 <code>lightdm</code> 和 <code>gdm</code> ，其他 DM 要用的话需要额外配置 Xsetup 脚本，这里不介绍。</p><p>可以通过<code>AUR</code>安装<a href="https://aur.archlinux.org/packages/optimus-manager/" target="_blank" rel="noopener">optimus-manager</a></p><p>也可以通过<code>archlinxucn</code>源直接安装</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> pacman -Sy optimus-manager</code></pre><p>安装完成后开启服务</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl <span class="token function">enable</span> optimus-manager.service</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>首先确保<code>/etc/X11/xorg.conf</code>和<code>/ext/X11/xorg.conf.d</code>下没有其他显卡与显示相关的配置,如果有的话可以直接删除,因为<code>optimus-manager</code>会自动生成显卡配置<code>/etc/X11/xorg.conf.d/10-optimus-manager.conf</code></p><p>如果已经安装<code>bumblebee</code>,请执行以下命令关闭<code>bumblebeed</code></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl disable bumblebeed</code></pre><p>检查<code>/etc/modules-load.d/</code>以确保<code>bbswitch</code>模块不要在开机时被加载</p><p>最后安装<code>nvidia</code>闭源驱动</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> pacman -S nvidia-utils</code></pre><h2 id="配置-optimus-maager"><a href="#配置-optimus-maager" class="headerlink" title="配置 optimus-maager"></a>配置 optimus-maager</h2><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/optimus-manager</code></pre><p>将<code>optimus-manager</code>默认配置复制至<code>/etc/optimus-manager</code>进行另外配置</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">cp</span> /usr/share/optimus-manager.conf /etc/optimus-manager/optimus-manager.conf$ <span class="token function">sudo</span> vim /etc/optimus-manager/optimus-manager.conf</code></pre><p>各选项配置</p><pre class=" language-text"><code class="language-text">[optimus]# 切换方式，可能值： nouveau, bbswitch, none# 如果选择 none，Nvidia在你使用 Intel 的时候将一直处于通电状态# 如果使用 bbswitch, 在你使用 Intel 的时候将无法使用 Nvidia 上的# 接口输出到外接显示器。# 使用 bbswitch 必须安装 bbswitch 或者 bbswitch-dkms。# bbswitch 暂时还不支持 10系以上显卡 (真的不支持？还是 ACPI 锁死问题呢？)switching=nouveau# 在 Intel 模式下开启 PCI 电源管理# 如果不开的话会你会发现耗电量会比较大# 如果已经使用了 bbswitch 这个选项会被忽略pci_power_control=yes[intel]# 使用哪一个 Intel 驱动# 可能值: modesetting, inteldriver=modesetting# 加速模式# intel 驱动专属，对modesetting无效# 可能值 :  sna, xna# 留空以使用默认值accel=# 开启 TearFree 选项# intel驱动的选项, 对modesetting无效# 可能值: yes, no# 留空以使用默认值tearfree=# DRI 版本. 可能值 : 2, 3DRI=3# 是否对 nouveau 开启 modesetting.# 对 intel 驱动无效# 如果你使用 bbswitch 作为切换方式，这个选项会被忽略modeset=yes[nvidia]# DRI版本，可能值： 2, 3DRI=3# 是否开启 modesetting，如果要使用 PRIME Synchronization 来避免# 画面撕裂的话，必须开启modeset=yes# 是否开启 NVIDIA 驱动的 NVreg_UsePageAttributeTable 选项# 推荐开启，否则可能会导致 CPU 低性能。PAT=yes# DPI 值. 帮你设置登录管理器的 DPI# 原理是启动登录管理器的时候执行：# xrandr --dpi <dpi value># 留空以使用默认值DPI=# Nvidia 专有选项，选项之间以逗号分隔# 支持的选项:# - overclocking : 开启 CoolBits 并在 NVIDIA 面板中解锁超频选项。# - triple_buffer : 开启三倍缓冲options=overclocking</code></pre><p>配置完成后直接重启生效</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>确保<code>optimus-manager.service</code>已经运行</p><p>运行</p><pre class=" language-bash"><code class="language-bash">$ optimus-manager --switch nvidia</code></pre><p>切换至nvidia</p><p>运行</p><pre class=" language-bash"><code class="language-bash">$ optimus-manager --switch intel</code></pre><p>切换至intel</p><p>运行</p><pre class=" language-bash"><code class="language-bash">$ optimus-manager --set-startup<span class="token operator">=</span>intel</code></pre><p>设置开机使用intel</p><h2 id="图形前端-optimus-manager-qt"><a href="#图形前端-optimus-manager-qt" class="headerlink" title="图形前端 optimus-manager-qt"></a>图形前端 <code>optimus-manager-qt</code></h2><p><a href="https://github.com/Shatur95/optimus-manager-qt" target="_blank" rel="noopener">optimus-manager-qt</a><br><img src="https://github.com/Askannz/optimus-manager/raw/master/systray.png" alt="optimus-manager-qt"></p><p>gnome-shell 扩展 <a href="https://github.com/inzar98/optimus-manager-argos" target="_blank" rel="noopener">optimus-manager-argos</a><br><img src="https://github.com/inzar98/optimus-manager-argos/raw/master/screenshots/optimus-manager-1.png" alt="optimus-manager-argos"></p><p><code>kde</code>用户可以从<code>archlinuxcn</code>源安装<code>optimus-manager-qt-kde</code></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> pacman -Sy optimus-manager-qt-kde</code></pre><p>非<code>kde</code>用户, 安装<code>optimus-manager-qt</code></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> pamcna -Sy optimus-manager-qt</code></pre><p>转载自<a href="https://blog.edward-p.xyz/optimus-manager/" target="_blank" rel="noopener">https://blog.edward-p.xyz/optimus-manager/</a></p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Arch </tag>
            
            <tag> optimius-manager </tag>
            
            <tag> 显卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LNMP环境配置-Ubuntu18.04</title>
      <link href="/2020/04186753.html"/>
      <url>/2020/04186753.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>lamp 的全称是linux + apache + mysql +php<br>lnmp 的全称是linux + nginx + mysql + php （国外喜欢简称为LEMP，搜英文资料需要搜LEMP）<br>Nginx 特性Nginx 性能稳定、功能丰富、运维简单、处理静态文件速度快且消耗系统资源极少。</p><ol><li>相比 Apache，用 Nginx 作为 Web 服务器：使用资源更少，支持更多并发连接，效率更高。</li><li>作为负载均衡服务器：Nginx 既可在内部直接支持 Rails 和 PHP，也可支持作为 HTTP 代理服务器对外进行服务。Nginx 用 C 编写而成， 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。</li><li>作为邮件代理服务器：Nginx 同时也是一款非常优秀的邮件代理服务器（最早开发这个产品的目的之一，是作为邮件代理服务器）。</li><li>反向代理可以根据url将请求转向于不同用途的集群，比如图片请求，转向图片服务器集群；视频请求，转身视频服务器集群。</li></ol><p>nginx是一款轻量级的web服务器/反向代理服务器/电子邮件代理服务器，安装非常简单，配置文件也很简洁（还支持 perl 语法）。Nginx 支持平滑加载新配置，还能够在不间断服务的情况下进行软件版本升级。</p><p>作者：西蒙宫<br>链接：<a href="https://www.zhihu.com/question/19697826/answer/142110770" target="_blank" rel="noopener">https://www.zhihu.com/question/19697826/answer/142110770</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h3 id="在本指南中，我们将安装一个-LNMP-Stack-Nginx，MySQL，PHP-，并在-Ubuntu-Server-18-04-19-10上配置一个-web-服务器。"><a href="#在本指南中，我们将安装一个-LNMP-Stack-Nginx，MySQL，PHP-，并在-Ubuntu-Server-18-04-19-10上配置一个-web-服务器。" class="headerlink" title="在本指南中，我们将安装一个 LNMP Stack (Nginx，MySQL，PHP) ，并在 Ubuntu Server 18.04 / 19.10上配置一个 web 服务器。"></a>在本指南中，我们将安装一个 LNMP Stack (Nginx，MySQL，PHP) ，并在 Ubuntu Server 18.04 / 19.10上配置一个 web 服务器。</h3><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件:"></a>先决条件:</h2><h4 id="你应该使用具有sudo权限的用户账户，或者root账户"><a href="#你应该使用具有sudo权限的用户账户，或者root账户" class="headerlink" title="你应该使用具有sudo权限的用户账户，或者root账户"></a>你应该使用具有sudo权限的用户账户，或者root账户</h4><hr><h2 id="1-Install-Nginx"><a href="#1-Install-Nginx" class="headerlink" title="1. Install Nginx"></a>1. Install Nginx</h2><p>让我们从更新软件包列表和在 Ubuntu 18.04 / 19.10上安装 Nginx 开始。 下面我们用 &amp; &amp; 分隔两个命令。 第一个命令将更新包列表，以确保您获得 Nginx 的最新版本和依赖项。 然后，第二个命令将下载并安装 Nginx。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> apt <span class="token function">install</span> nginx</code></pre><p>安装后，检查 Nginx 服务是否正在运行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> nginx status</code></pre><p>如果 Nginx 正常运行，您应该会看到下面的绿色活动状态。</p><pre class=" language-bash"><code class="language-bash">● nginx.service - A high performance web server and a reverse proxy server   Loaded: loaded <span class="token punctuation">(</span>/lib/systemd/system/nginx.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>   Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Wed 2018-05-09 20:42:29 UTC<span class="token punctuation">;</span> 2min 39s ago     Docs: man:nginx<span class="token punctuation">(</span>8<span class="token punctuation">)</span>  Process: 27688 ExecStart<span class="token operator">=</span>/usr/sbin/nginx -g daemon on<span class="token punctuation">;</span> master_process on<span class="token punctuation">;</span> <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, status<span class="token operator">=</span>0/SUCCESS<span class="token punctuation">)</span>  Process: 27681 ExecStartPre<span class="token operator">=</span>/usr/sbin/nginx -t -q -g daemon on<span class="token punctuation">;</span> master_process on<span class="token punctuation">;</span> <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, status<span class="token operator">=</span>0/SUCCESS<span class="token punctuation">)</span> Main PID: 27693 <span class="token punctuation">(</span>nginx<span class="token punctuation">)</span>    Tasks: 2 <span class="token punctuation">(</span>limit: 1153<span class="token punctuation">)</span>   CGroup: /system.slice/nginx.service           ├─27693 nginx: master process /usr/sbin/nginx -g daemon on<span class="token punctuation">;</span> master_process on<span class="token punctuation">;</span>           └─27695 nginx: worker process</code></pre><p>您可能需要按 q 退出服务状态。</p><h2 id="2-Configure-Firewall"><a href="#2-Configure-Firewall" class="headerlink" title="2. Configure Firewall"></a>2. Configure Firewall</h2><p>配置防火墙</p><p>如果您还没有这样做，建议您启用 ufw 防火墙并为 Nginx 添加一个规则。 在启用 ufw 防火墙之前，请确保为 SSH 添加了一个规则，否则，如果远程连接，可能会被锁定在服务器之外。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow OpenSSH</code></pre><p>查看可以开放的应用</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw app list</code></pre><p>现在为<code>Nginx</code>增加一条规则</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow <span class="token string">'Nginx HTTP'</span></code></pre><p>可以看到</p><pre class=" language-bash"><code class="language-bash">Rule addedRule added <span class="token punctuation">(</span>v6<span class="token punctuation">)</span></code></pre><p>启用<code>ufw</code>firewall</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw <span class="token function">enable</span></code></pre><p>按<code>y</code>允许启用</p><p>现在检查防火墙状态</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw status</code></pre><pre class=" language-bash"><code class="language-bash">Status: activeTo                         Action      From--                         ------      ----OpenSSH                    ALLOW       AnywhereNginx HTTP                 ALLOW       AnywhereOpenSSH <span class="token punctuation">(</span>v6<span class="token punctuation">)</span>               ALLOW       Anywhere <span class="token punctuation">(</span>v6<span class="token punctuation">)</span>Nginx HTTP <span class="token punctuation">(</span>v6<span class="token punctuation">)</span>            ALLOW       Anywhere <span class="token punctuation">(</span>v6<span class="token punctuation">)</span></code></pre><p>就是这样! 你在 Ubuntu 18.04 / 19.10上的 Nginx 网络服务器现在应该准备好了。</p><h2 id="3-Test-Nginx"><a href="#3-Test-Nginx" class="headerlink" title="3. Test Nginx"></a>3. Test Nginx</h2><p>进入你的网页浏览器，访问你的域名或 IP 地址。 如果你还没有域名，并且不知道你的 IP 地址，你可以通过运行:</p><pre class=" language-bash"><code class="language-bash">ip a <span class="token operator">|</span> <span class="token function">grep</span> -Eo <span class="token string">'inet (addr:)?([0-9]*\.){3}[0-9]*'</span> <span class="token operator">|</span> <span class="token function">grep</span> -Eo <span class="token string">'([0-9]*\.){3}[0-9]*'</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'127.0.0.1'</span></code></pre><p><img src="https://devanswers.co/wp-content/uploads/2018/04/welcome-to-nginx-test-page.png" alt="ip"></p><p><strong>如果使用的是云服务器 则可以直接使用公网ip在本地的浏览器输入</strong></p><p>您可以在文档根目录 / var / www / html 中找到这个 Nginx 默认欢迎页面。 要在文本编辑器中编辑这个文件:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /var/www/html/index.nginx-debian.html</code></pre><p>你的 Nginx 网络服务器已经准备好了！ 现在可以在 / var / www / html 目录中添加自己的 html 文件和图像。</p><h2 id="4-Install-MySQL"><a href="#4-Install-MySQL" class="headerlink" title="4. Install MySQL"></a>4. Install MySQL</h2><p>让我们从更新软件包列表和在 Ubuntu 18.04 / 19.10上安装 MySQL 开始。 下面我们用 &amp; &amp; 分隔两个命令。 第一个命令将更新包列表，以确保您获得 MySQL 的最新版本和依赖项。 然后，第二个命令将下载并安装 MySQL。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update <span class="token operator">&amp;&amp;</span> apt <span class="token function">install</span> mysql-server</code></pre><p>当提示安装 MySQL 包时，按 y 键和 ENTER 键。<br>一旦包安装程序完成，我们就可以检查 MySQL 服务是否正在运行。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> mysql status</code></pre><p>如果运行，你会看到一个绿色的活动状态，如下所示。</p><pre class=" language-bash"><code class="language-bash">● mysql.service - MySQL Community ServerLoaded: loaded <span class="token punctuation">(</span>/lib/systemd/system/mysql.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since since Wed 2018-05-09 21:10:24 UTC<span class="token punctuation">;</span> 16s ago Main PID: 30545 <span class="token punctuation">(</span>mysqld<span class="token punctuation">)</span>    Tasks: 27 <span class="token punctuation">(</span>limit: 1153<span class="token punctuation">)</span>   CGroup: /system.slice/mysql.service           └─30545 /usr/sbin/mysqld --daemonize --pid-file<span class="token operator">=</span>/run/mysqld/mysqld.pid</code></pre><p>您可能需要按 q 退出服务状态。</p><h2 id="5-配置-MySQL-Security"><a href="#5-配置-MySQL-Security" class="headerlink" title="5.配置 MySQL Security"></a>5.配置 MySQL Security</h2><p>现在应该运行 MySQL 安全安装来配置 MySQL 服务器的安全性。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> mysql_secure_installation</code></pre><p>如果您在步骤1中创建了根密码，可能会提示您在这里输入它。 否则你将被要求创建一个。 (在这里输入密码)</p><p>您将被问及是否需要设置验证密码插件。 除非您出于某种原因希望实施严格的密码策略，否则实际上没有必要这样做。</p><pre class=" language-bash"><code class="language-bash">Securing the MySQL server deployment.Connecting to MySQL using a blank password.VALIDATE PASSWORD PLUGIN can be used to <span class="token function">test</span> passwordsand improve security. It checks the strength of passwordand allows the <span class="token function">users</span> to <span class="token keyword">set</span> only those passwords <span class="token function">which</span> aresecure enough. Would you like to setup VALIDATE PASSWORD plugin?Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No:</code></pre><p>如果您不想设置验证密码插件，请在这里按 n 和 ENTER。</p><pre class=" language-bash"><code class="language-bash">Please <span class="token keyword">set</span> the password <span class="token keyword">for</span> root here.New password:Re-enter new password:</code></pre><p>如果在步骤1中没有创建 root 密码，那么现在必须在这里创建一个。<br>生成一个强密码并输入它。 请注意，当您在 Linux 中输入密码时，输入时不会显示任何信息(没有星号或点)。</p><pre class=" language-bash"><code class="language-bash">By default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created <span class="token keyword">for</span> them. This is intended only <span class="token keyword">for</span>testing, and to <span class="token function">make</span> the installation go a bit smoother.You should remove them before moving into a productionenvironment.Remove anonymous users? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span></code></pre><p>按 y 和 ENTER 以删除匿名用户。</p><pre class=" language-bash"><code class="language-bash">Normally, root should only be allowed to connect from<span class="token string">'localhost'</span><span class="token keyword">.</span> This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span></code></pre><p>按 y 和 ENTER 远程禁止 root 登录。 这将防止僵尸和黑客试图猜测根密码。</p><pre class=" language-bash"><code class="language-bash">By default, MySQL comes with a database named <span class="token string">'test'</span> thatanyone can access. This is also intended only <span class="token keyword">for</span> testing,and should be removed before moving into a productionenvironment.Remove <span class="token function">test</span> database and access to it? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span></code></pre><p>按 y 和 ENTER 以删除测试数据库。</p><pre class=" language-bash"><code class="language-bash">Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span></code></pre><p>按 y 和 ENTER 重新加载特权表。</p><p>完成</p><p>作为测试，您可以登录到 MySQL 服务器并运行 version 命令。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> mysqladmin -p -u root version</code></pre><p>输入您先前创建的 MySQL root 密码，您应该会看到以下内容:</p><pre class=" language-bash"><code class="language-bash">mysqladmin  Ver 8.42 Distrib 5.7.22, <span class="token keyword">for</span> Linux on x86_64Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Server version          5.7.22-0ubuntu18.04.1Protocol version        10Connection              Localhost via UNIX socketUNIX socket             /var/run/mysqld/mysqld.sockUptime:                 4 min 28 secThreads: 1  Questions: 15  Slow queries: 0  Opens: 113  Flush tables: 1  Open tables: 106  Queries per second avg: 0.055</code></pre><p>您现在已经成功地为 Ubuntu 18.04 / 19.10安装和配置了 MySQL！ 继续下一步安装 PHP。</p><h2 id="6-Install-PHP"><a href="#6-Install-PHP" class="headerlink" title="6. Install PHP"></a>6. Install PHP</h2><p>与 Apache 不同，Nginx 不包含本地 PHP 处理。 为此，我们必须安装 PHP-FPM (FastCGI 流程管理器)。 Fpm 是一种替代的 PHP FastCGI 实现，具有一些对重载站点有用的附加特性。</p><p>让我们首先更新软件包列表并在 Ubuntu 18.04 / 19.10上安装 PHP-FPM。 我们还将安装 PHP-MySQL，以允许 PHP 与 MySQL 数据库通信。 下面我们用 &amp; &amp; 分隔两个命令。 第一个命令将更新包列表，以确保您获得 PHP-FPM 和 php-mysql 的最新版本和依赖项。 然后，第二个命令将下载并安装 PHP-FPM 和 php-mysql。 请求继续时按 y 和 ENTER。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> apt <span class="token function">install</span> php-fpm php-mysql</code></pre><p>一旦安装，请检查 PHP 版本。</p><pre class=" language-bash"><code class="language-bash">php --version</code></pre><p>如果 PHP 安装正确，您应该会看到与下面类似的内容。</p><pre class=" language-bash"><code class="language-bash">PHP 7.2.3-1ubuntu1 <span class="token punctuation">(</span>cli<span class="token punctuation">)</span> <span class="token punctuation">(</span>built: Mar 14 2018 22:03:58<span class="token punctuation">)</span> <span class="token punctuation">(</span> NTS <span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1997-2018 The PHP GroupZend Engine v3.2.0, Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1998-2018 Zend Technologieswith Zend OPcache v7.2.3-1ubuntu1, Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1999-2018, by Zend Technologies</code></pre><p>上面我们使用的是 PHP 版本7.2，不过这可能是一个更新的版本，具体取决于存储库中的哪个包。</p><p>根据您安装的是哪个版本的 Nginx 和 PHP，您可能需要手动配置 Nginx 将连接到的 PHP 套接字的位置。</p><p>列出目录 / var / run / php / 的内容</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> /var/run/php/</code></pre><p>你应该在这里看到一些条目。</p><pre class=" language-bash"><code class="language-bash">php7.2-fpm.pid php7.2-fpm.sock</code></pre><p>上面我们可以看到这个接口被称为 php7.2-fpm.sock。请记住这一点，因为下一步可能需要它。</p><h2 id="7-Configure-Nginx-for-PHP"><a href="#7-Configure-Nginx-for-PHP" class="headerlink" title="7. Configure Nginx for PHP"></a>7. Configure Nginx for PHP</h2><p>现在我们需要对 Nginx 服务器块进行一些更改。</p><p>服务器块的位置可能根据您的设置而有所不同。默认情况下，它位于 / etc / nginx / sites-available / default。</p><p>但是，如果您以前在我们前面的一个指南中为多个域设置了自定义服务器块，那么您将需要将 PHP 指令分别添加到每个服务器块中。 典型的自定义服务器块文件位置是 / etc / nginx / sites-available / mytest1. com。</p><p>目前，我们假设您正在使用默认值。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/nginx/sites-availiable/default</code></pre><p>查找<code>index.html</code></p><p>在<code>index.html</code>前添加<code>index.php</code></p><pre class=" language-bash"><code class="language-bash">        index index.php index.html index.htm index.nginx-debian.html<span class="token punctuation">;</span></code></pre><p>查找<code>server_name</code><br>在这里输入您的服务器 IP 或域名(如果有的话)。</p><pre class=" language-bash"><code class="language-bash">        server_name YOUR_DOMAIN_OR_IP_HERE<span class="token punctuation">;</span></code></pre><p>查找<code>location ~ \.php</code></p><p>在这里，您需要通过删除下面用红色标记的行前的 # 符号来取消某些行的注释。</p><p>还要确保 fastcgi 传递套接字路径的值是正确的。 例如，如果您安装了 PHP 版本7.2，套接字应该是: / var / run / PHP / php7.2-fpm。 袜子</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">..</span>.        location ~ \.php$ <span class="token punctuation">{</span>                include snippets/fastcgi-php.conf<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true">#       # With php-fpm (or other unix sockets):</span>                fastcgi_pass unix:/var/run/php/php7.2-fpm.sock<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#       # With php-cgi (or other tcp sockets):</span>        <span class="token comment" spellcheck="true">#       fastcgi_pass 127.0.0.1:9000; 这一行不应该取消注释否则会与上一行冲突</span>        <span class="token punctuation">}</span><span class="token punctuation">..</span>.</code></pre><p>保存关闭</p><p>现在检查配置文件以确保没有语法错误。 任何错误都可能导致 web 服务器在重启时崩溃。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> nginx -t</code></pre><pre class=" language-bash"><code class="language-bash">nginx: the configuration <span class="token function">file</span> /etc/nginx/nginx.conf syntax is oknginx: configuration <span class="token function">file</span> /etc/nginx/nginx.conf <span class="token function">test</span> is successful</code></pre><p>如果没有错误，可以重新加载 Nginx 配置。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> nginx reload</code></pre><h2 id="8-Test-PHP"><a href="#8-Test-PHP" class="headerlink" title="8. Test PHP"></a>8. Test PHP</h2><p>要查看在 Ubuntu 18.04 / 19.10上 PHP 是否正常工作，让我们在文档根目录中创建一个名为 info.PHP 的新 PHP 文件。 默认情况下，它位于 / var / www / html / ，或者如果您在以前的指南中设置了多个域，它可能位于像 / var / www / mytest1这样的地方。 Com / public html</p><p>一旦你有了正确的文档根目录，使用 nano 文本编辑器创建一个新的 info.php 文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /var/www/html/info.php</code></pre><p>在新文件中键入或粘贴以下代码(如果在 Windows 中使用 PuTTY，右键单击粘贴)</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpphpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>保存退出现在，你可以通过浏览服务器的域名或公共 IP 地址，然后是 / info.php: <a href="http://your_domain_or_ip/info.php" target="_blank" rel="noopener">http://your_domain_or_ip/info.php</a> 地址，在你的网页浏览器中查看这个页面</p><p><img src="https://devanswers.co/?attachment_id=2541" alt="php"><br>您现在已经在 Ubuntu 18.04 / 19.10上成功安装了针对 Nginx 的 PHP-FPM。</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> blog </tag>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git服务器添加公钥后仍需要密码</title>
      <link href="/2020/033054874.html"/>
      <url>/2020/033054874.html</url>
      
        <content type="html"><![CDATA[<p>创建git的家目录 <code>mkdir /home/git</code><br>将家目录拥有者改为<code>git</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /home/git</code></pre><p>在本机家目录执行<code>ssh-copy-id -i ~/.ssh/id_rsa git@my_server_ip</code><br>自动修复权限问题</p>]]></content>
      
      
      <categories>
          
          <category> tehchnology </category>
          
          <category> server </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>neofetch修改</title>
      <link href="/2020/03304881.html"/>
      <url>/2020/03304881.html</url>
      
        <content type="html"><![CDATA[<p>与Screenfetch相比，neofetch的logo图像非常接近，但是个性化可定制更高，支持信息更多，输出更快。比如logo定制、字体配色等多样玩法</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class=" language-bash"><code class="language-bash">vim ~/.config//neofetch/config.conf</code></pre><ol><li>设置显示logo，具体有哪些logo可以看<code>ls /usr/share/neofetch/ascii/distro</code><br>不知什么原因,我的系统中并没有这个路径,于是我去找到了包含<code>ascii/distro</code>的仓库</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://gitlab.com/ABHIRAMSHIBU/neofetch.git<span class="token function">cd</span> neofetch<span class="token function">sudo</span> <span class="token function">cp</span> ascii /usr/share/neofetch/ascii</code></pre><p>编辑<code>~/.config/neofetch/config.conf</code></p><pre class=" language-bash"><code class="language-bash">image_source<span class="token operator">=</span><span class="token string">"path"</span> <span class="token comment" spellcheck="true">#将pathi修改为</span>/usr/share/neofetch/ascii</code></pre><ol start="2"><li><p>将需要显示的信息前的注释符号<code>#</code>去掉</p><pre class=" language-bash"><code class="language-bash">print_info<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> info title info underline info <span class="token string">"OS"</span> distro info <span class="token string">"Host"</span> model info <span class="token string">"Kernel"</span> kernel info <span class="token string">"Uptime"</span> <span class="token function">uptime</span> info <span class="token string">"Packages"</span> packages info <span class="token string">"Shell"</span> shell info <span class="token string">"Resolution"</span> resolution info <span class="token string">"DE"</span> de info <span class="token string">"WM"</span> wm info <span class="token string">"WM Theme"</span> wm_theme info <span class="token string">"Theme"</span> theme info <span class="token string">"Icons"</span> icons info <span class="token string">"Terminal"</span> term info <span class="token string">"Terminal Font"</span> term_font info <span class="token string">"CPU"</span> cpu info <span class="token string">"GPU"</span> gpu info <span class="token string">"Memory"</span> memory  info <span class="token string">"GPU Driver"</span> gpu_driver  <span class="token comment" spellcheck="true"># Linux only</span>  info <span class="token string">"CPU Usage"</span> cpu_usage  info <span class="token string">"Disk"</span> disk  info <span class="token string">"Battery"</span> battery  info <span class="token string">"Font"</span> font  info <span class="token string">"Song"</span> song  info <span class="token string">"Local IP"</span> local_ip <span class="token comment" spellcheck="true"># info "Public IP" public_ip</span>  info <span class="token string">"Users"</span> <span class="token function">users</span>  info <span class="token string">"Install Date"</span> install_date  info <span class="token string">"Locale"</span> locale  <span class="token comment" spellcheck="true"># This only works on glibc systems.</span> info line_break info cols info line_break<span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> neofetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次解决所有代理问题</title>
      <link href="/2020/03292214.html"/>
      <url>/2020/03292214.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-让终端走代理的集中方法"><a href="#Linux-让终端走代理的集中方法" class="headerlink" title="Linux 让终端走代理的集中方法"></a>Linux 让终端走代理的集中方法</h2><blockquote><p>通过让终端走代理的方式来加快gitclone的速度。</p></blockquote><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><blockquote><p>认识代理的方式：代理是通过客户端与服务端通信，传输服务端能够访问到的资源文件，再由服务端客户端通信返回给客户端，从而间接访问服务端能够访问的资源</p></blockquote><p>首先确定自己服务端代理的通讯协议。 socks，http，https</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h3><p>直接在终端中运行:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> http_proxy<span class="token operator">=</span>http://proxyAddress:port</code></pre><p>这里的<code>proxyAddress</code>替换为代理服务器的ip，如果客户端支持本地监听就替换为<code>127.0.0.1</code> </p><p><code>port</code>端口替换为代理端口</p><p>例子</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> http_proxy<span class="token operator">=</span>http://127.0.0.1:1080<span class="token function">export</span> https_proxy<span class="token operator">=</span>http://127.0.0.1:1080<span class="token function">export</span> http_proxy<span class="token operator">=</span>socks5://127.0.0.1:1080</code></pre><p>这种方法的好处是只对当前打开的终端生效，当终端关闭代理就取消了</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h3><p>如果有永久保存代理服务器的需求</p><p>把代理服务器地址写进shell配置文件 <code>.bashrc</code>或者<code>.zshrc</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> http_proxy<span class="token operator">=</span><span class="token string">"http://localhost:port"</span><span class="token function">export</span> https_proxy<span class="token operator">=</span><span class="token string">"http://localhost:prot"</span></code></pre><p>可将冒号内的<code>http</code>替换为<code>socks5</code></p><p>或者干脆</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> ALL_PROXY<span class="token operator">=</span>socks5://127.0.0.1:1080</code></pre><p>最后执行命令使之生效</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrc</code></pre><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三:"></a>方法三:</h3><p><code>Proxychains</code>软件解决</p><p>Arch安装</p><pre><code>sudo pacman -S proxychains</code></pre><p>安装完成后编辑<code>/etc/proxychains.conf</code></p><p>注释掉<code>proxy_dns</code>这行，防止DNS污染</p><p>在文件最末添加</p><pre class=" language-bash"><code class="language-bash">socks5 127.0.0.1 1080</code></pre><p>以后每次需要执行需要代理的命令时，就在命令前添加<code>proxychains</code></p><h3 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h3><p>修改对应工具的代理配置</p><p>例如<code>git</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy <span class="token string">'socks://127.0.0.1:1080'</span><span class="token function">git</span> config --global https.proxy <span class="token string">'socks5:127.0.0.1:1080'</span></code></pre><p>取消代理</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global --unset http.prox<span class="token function">git</span> config --global --unset https.proxy</code></pre><p>以上解决的是git使用http协议的代理</p><p>ssh代理与之不同</p><pre class=" language-bash"><code class="language-bash">vim ~/.ssh/config<span class="token comment" spellcheck="true">#添加</span><span class="token comment" spellcheck="true"># 这里必须是 github.com，因为这个跟我们 clone 代码时的链接有关</span> Host github.com   <span class="token comment" spellcheck="true"># 如果用默认端口，这里是 github.com，如果想用443端口，这里就是 ssh.github.com 详见 https://help.github.com/articles/using-ssh-over-the-https-port/</span>   HostName github.com<span class="token comment" spellcheck="true">#   User git</span>   <span class="token comment" spellcheck="true"># 如果是 HTTP 代理，把下面这行取消注释，并把 proxyport 改成自己的 http 代理的端口</span>   <span class="token comment" spellcheck="true"># ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=20171</span>   <span class="token comment" spellcheck="true"># 如果是 socks5 代理，则把下面这行取消注释，并把 6666 改成自己 socks5 代理的端口</span>   <span class="token comment" spellcheck="true"># ProxyCommand nc -v -x 127.0.0.1:20170 %h %p</span></code></pre><hr><hr><p>以上至此</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Linux -terminal -proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch/Manjaro linxu下opencv环境搭建</title>
      <link href="/2020/032743360.html"/>
      <url>/2020/032743360.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux下opencv环境搭建"><a href="#Linux下opencv环境搭建" class="headerlink" title="Linux下opencv环境搭建"></a>Linux下opencv环境搭建</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><ul><li>从<a href="https://opencv.org/releases/" target="_blank" rel="noopener">opencv官网</a>下载源码sources包<ul><li>选择版本4.2.0</li><li>解压<pre class=" language-bash"><code class="language-bash">unzip opencv-4.2.0.zip<span class="token function">cd</span> opencv-4.2.0<span class="token function">mkdir</span> build<span class="token function">cd</span> build</code></pre></li><li>生成cmake编译信息<pre class=" language-bash"><code class="language-bash">cmake -D CMAKE_BUILD_TYPE<span class="token operator">=</span>Release -D CMAKE_INSTALL_PREFIX<span class="token operator">=</span>/usr/local <span class="token punctuation">..</span></code></pre>解释一下各个参数<br><code>CMAKE_BUILD_TYPE=Release\Debug</code> 分为发布和调试两种<br><code>CMAKE_INSTALL_PREFIX</code> 是安装位置<br><code>..</code>为从上级文件夹获取</li><li>编译<pre class=" language-bash"><code class="language-bash"><span class="token function">make</span> -j7 <span class="token comment" spellcheck="true">#使用7核心进行编译</span></code></pre></li><li>安装<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3>在<code>/etc/ld.so.conf.d/</code>文件夹下新建一个opencv4.conf, 里边<strong>写入</strong><br><code>/usr/local/lib</code></li></ul></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/ld.so.conf.d/<span class="token function">sudo</span> <span class="token function">touch</span> opencv4.conf <span class="token comment" spellcheck="true">#3.4.9版本就新建opencv3.conf</span><span class="token function">sudo</span> sh -c 'echo <span class="token string">"/usr/local/lib"</span> <span class="token operator">></span> opencv4.conf <span class="token comment" spellcheck="true">#opencv3就一样替换</span></code></pre><p>更新pkg-config: pkg-config使用来扫描opencv的存在的</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> ldconfig</code></pre><p>复制pc文件，要不然测试提示错误:you should add the directory containing opencv.pc</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> -f /usr/local/lib/pkgconfig/opencv4.pc /usr/lib/pkgconfig/ <span class="token comment" spellcheck="true">#opencv4</span><span class="token function">sudo</span> <span class="token function">cp</span> -f /usr/local/lib/pkgconfig/opencv.pc /usr/lib/pkgconfig/ <span class="token comment" spellcheck="true">#opencv</span></code></pre><p>前面复制的路径，我自己的与我看到的教程中并不同，每个/usr/local/lib里都找一下能找到就行<br>后面的路径是pkg-config自动搜索的路径<br>引用<a href="https://people.freedesktop.org/~dbn/pkg-config-guide.html" target="_blank" rel="noopener">freedestop</a></p><pre><code>This variable is used to augment pkg-config&#39;s search path. On a typical Unix system, it will search in the directories /usr/lib/pkgconfig and /usr/share/pkgconfig. This will usually cover system installed modules. However, some local modules may be installed in a different prefix such as /usr/local. In that case, it&#39;s necessary to prepend the search path so that pkg-config can locate the .pc files.</code></pre><p>测试:</p><pre class=" language-bash"><code class="language-bash">pkg-config --libs opencv4 pkg-config --cflags opencv4pkg-config --modversion opencv4 <span class="token comment" spellcheck="true"># 查看版本号</span></code></pre><p><strong>opencv3</strong>就将opencv4替换为opencv</p><blockquote><p>添加环境变量是不用的, 这个是用来在编译时候指定Opencv版本用, 有的教程里有这部分,没必要:</p></blockquote><pre class=" language-bash"><code class="language-bash">    PKG_CONFIG_PATH<span class="token operator">=</span><span class="token variable">$PKG_CONFIG_PATH</span>:/usr/lib/pkgconfig    <span class="token function">export</span> PKG_CONFIG_PATH</code></pre><h3 id="3-卸载"><a href="#3-卸载" class="headerlink" title="3. 卸载"></a>3. 卸载</h3><p>删掉<code>opencv4.conf</code>文件，然后在编译的build文件下运行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> uinstall</code></pre><hr><p>以上是Linux通用的编译方法, 但是对Arch系Linux不需要这么麻烦, 直接用源上编译好的即可:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S opencv</code></pre><p>依赖</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S opencv-samples  qt5-base  vtk</code></pre><p>如果使用的是编译版本, 只需要指定opencv编译位置PATH_TO_BUILD : set(OpenCV_DIR PATH_TO_BUILD),我的CMakeLists.txt是:<br><img src="https://img2018.cnblogs.com/blog/1430038/201905/1430038-20190509101908123-1208636106.png" alt="手动指定"><br>如果使用Arch社区仓库的OPencv4, 可以显式指定opencv版本<code>find_package(OpenCV 4 REQUIRED )</code>.<br><img src="https://img2018.cnblogs.com/blog/1430038/201905/1430038-20190509104744667-1821453979.png" alt="显式指定"></p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> opencv </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsh+oh-my-zsh配置</title>
      <link href="/2020/031035980.html"/>
      <url>/2020/031035980.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000013612471" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013612471</a></p><p>本文以CentOS 7/Mac 为例，介绍zsh的配置使用教程。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="查看当前环境shell"><a href="#查看当前环境shell" class="headerlink" title="查看当前环境shell"></a>查看当前环境shell</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token variable">$SHELL</span></code></pre><a id="more"></a><h3 id="查看系统自带哪些shell"><a href="#查看系统自带哪些shell" class="headerlink" title="查看系统自带哪些shell"></a>查看系统自带哪些shell</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells</code></pre><h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> zsh <span class="token comment" spellcheck="true"># CentOS</span>brew <span class="token function">install</span> zsh <span class="token comment" spellcheck="true"># mac安装</span></code></pre><h3 id="将zsh设置为默认shell"><a href="#将zsh设置为默认shell" class="headerlink" title="将zsh设置为默认shell"></a>将<code>zsh</code>设置为默认shell</h3><pre class=" language-bash"><code class="language-bash">chsh -s /bin/zsh <span class="token comment" spellcheck="true"># CentOS</span><span class="token comment" spellcheck="true"># Mac如下</span><span class="token comment" spellcheck="true"># 在 /etc/shells 文件中加入如下一行</span>/usr/local/bin/zsh<span class="token comment" spellcheck="true"># 接着运行</span>chsh -s /usr/local/bin/zsh</code></pre><p>可以通过<code>echo $SHELL</code>查看当前默认的shell，如果没有改为<code>/bin/zsh</code>，那么需要重启shell。</p><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><p>配置zsh是一件麻烦的事儿，爱折腾的程序猿怎么可能忍受？！于是，<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a>出现了，有了这个东东，zsh配置起来就方便多了！</p><h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h3><p>有若干安装方式，介绍三种：<br>1.自动安装</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - <span class="token operator">|</span> sh</code></pre><p>2.手动安装</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh<span class="token function">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</code></pre><p>3.真-手动安装</p><ul><li>在<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a>的github主页，手动将zip包下载下来。</li><li>将zip包解压，拷贝至<code>~/.oh-my-zsh</code>目录。此处省略拷贝的操作步骤。</li><li>执行<code>cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</code></li></ul><p>三选一即可，适合各种环境下的安装，然后需要<code>source ~/.zshrc</code>将配置生效。以下修改了<code>.zshrc</code>文件之后，都执行一下这个命令。</p><h3 id="zsh主题"><a href="#zsh主题" class="headerlink" title="zsh主题"></a>zsh主题</h3><p>通过如下命令可以查看可用的<code>Theme</code>：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ls ~/.oh-my-zsh/themes</span></code></pre><p>如何修改zsh主题呢？<br>编辑<code>~/.zshrc</code>文件，将<code>ZSH_THEME=&quot;candy&quot;</code>,即将主题修改为<code>candy</code>。我采用的<code>steeef</code>。</p><h3 id="zsh扩展"><a href="#zsh扩展" class="headerlink" title="zsh扩展"></a>zsh扩展</h3><p>在<code>~/.zshrc</code>中找到<code>plugins</code>关键字，就可以自定义启用的插件了，系统默认加载<code>git</code>。</p><h4 id="git插件"><a href="#git插件" class="headerlink" title="git插件"></a>git插件</h4><p>命令内容可以参考<code>cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh</code>。</p><p>常用的：</p><pre class=" language-bash"><code class="language-bash">gapa    <span class="token function">git</span> add --patchgc<span class="token operator">!</span>    <span class="token function">git</span> commit -v --amendgcl    <span class="token function">git</span> clone --recursivegclean    <span class="token function">git</span> reset --hard <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> clean -dfxgcm    <span class="token function">git</span> checkout mastergcmsg    <span class="token function">git</span> commit -mgco    <span class="token function">git</span> checkoutgd    <span class="token function">git</span> <span class="token function">diff</span>gdca    <span class="token function">git</span> <span class="token function">diff</span> --cachedgp    <span class="token function">git</span> pushgrbc    <span class="token function">git</span> rebase --continuegst    <span class="token function">git</span> statusgup    <span class="token function">git</span> pull --rebase</code></pre><p>完整列表：<code>https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git</code></p><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><p>解压文件用的，所有的压缩文件，都可以直接<code>x filename</code>，不用记忆参数</p><p>当然，如果你想要用<code>tar</code>命令，可以使用<code>tar -</code>加<code>tab</code>键，zsh会列出参数的含义。</p><h4 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h4><p>按照<a href="https://github.com/wting/autojump" target="_blank" rel="noopener">官方文档</a>介绍，需要使用如下命令安装，而不是一些博客中的介绍：</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> autojump-zsh <span class="token comment" spellcheck="true"># CentOS</span>brew <span class="token function">install</span> autojump <span class="token comment" spellcheck="true"># Mac</span></code></pre><p><code>CentOS</code>安装好之后，需要在<code>~/.zshrc</code>中配置一下，除了在<code>plugins</code>中增加<code>autojump</code>之外，还需要添加一行：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> -s ~/.autojump/etc/profile.d/autojump.sh <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">.</span> ~/.autojump/etc/profile.d/autojump.sh</code></pre><p>安装好之后，记得<code>source ~/.zshrc</code>，然后你就可以通过<code>j+目录名</code>快速进行目录跳转。支持目录名的模糊匹配和自动补全。</p><ul><li><code>j -stat</code>：可以查看历史路径库</li></ul><h4 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h4><p><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener">zsh-autosuggestions</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git://github.com/zsh-users/zsh-autosuggestions <span class="token variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</code></pre><p>在 <code>~/.zshrc</code> 中配置</p><pre class=" language-bash"><code class="language-bash">plugins<span class="token operator">=</span><span class="token punctuation">(</span>其他的插件 zsh-autosuggestions<span class="token punctuation">)</span></code></pre><p>因为箭头<code>→</code>不太方便，在<code>.zshrc</code>中自定义补全快捷键为逗号，但是又一次遇到了需要输入逗号的情况，所以，并不太推荐如下修改：</p><pre class=" language-bash"><code class="language-bash">bindkey <span class="token string">','</span> autosuggest-accept</code></pre><h4 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h4><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">zsh-syntax-highlighting</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="token variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-syntax-highlighting</code></pre><p><code>~/.zshrc</code>文件中配置：</p><pre class=" language-bash"><code class="language-bash">plugins<span class="token operator">=</span><span class="token punctuation">(</span>其他的插件 zsh-syntax-highlighting<span class="token punctuation">)</span></code></pre><h4 id="git-open"><a href="#git-open" class="headerlink" title="git-open"></a>git-open</h4><p><a href="https://github.com/paulirish/git-open" target="_blank" rel="noopener">git-open</a>插件可以在你git项目下打开远程仓库浏览项目。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/paulirish/git-open.git <span class="token variable">$ZSH_CUSTOM</span>/plugins/git-open</code></pre><h4 id="bat"><a href="#bat" class="headerlink" title="bat"></a>bat</h4><p><code>bat</code> 代替 <code>cat</code><br><code>cat</code> 某个文件，可以在终端直接输出文件内容，<code>bat</code> 相比 <code>cat</code> 增加了行号和颜色高亮 👍</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> bat</code></pre><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul><li>命令历史记录<ul><li>一旦在 shell 敲入正确命令并能执行后，shell 就会存储你所敲入命令的历史记录（存放在<code>~/.zsh_history</code> 文件中），方便再次运行之前的命令。可以按方向键↑和↓来查看之前执行过的命令</li><li>可以用 <code>r</code>来执行上一条命令</li><li>使用 <code>ctrl-r</code> 来搜索命令历史记录</li></ul></li><li>命令别名<ul><li>可以简化命令输入，在 <code>.zshrc</code> 中添加 <code>alias shortcut=&#39;this is the origin command&#39;</code> 一行就相当于添加了别名</li><li>在命令行中输入 <code>alias</code> 可以查看所有的命令别名</li></ul></li></ul><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><ul><li>连按两次Tab会列出所有的补全列表并直接开始选择，补全项可以使用 ctrl+n/p/f/b上下左右切换</li><li>智能跳转，安装了 autojump 之后，zsh 会自动记录你访问过的目录，通过 j 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全，例如你访问过 hadoop-1.0.0 目录，输入j hado 即可正确跳转。j –stat 可以看你的历史路径库。</li><li>命令选项补全。在zsh中只需要键入 tar -<tab> 就会列出所有的选项和帮助说明</li><li>在当前目录下输入 .. 或 … ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 <code>cd</code> 命令了。在你知道路径的情况下，比如 <code>/usr/local/bin</code> 你可以输入<code>cd /u/l/b</code> 然后按进行补全快速输入</li><li>目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。</li><li>命令参数补全。键入<code>kill</code> 就会列出所有的进程名和对应的进程号</li><li>更智能的历史命令。在用或者方向上键查找历史命令时，zsh支持限制查找。比如，输入ls,然后再按方向上键，则只会查找用过的ls命令。而此时使用则会仍然按之前的方式查找，忽略 ls</li><li>多个终端会话共享历史记录</li><li>通配符搜索：<code>ls -l **/*.sh</code>，可以递归显示当前目录下的 shell 文件，文件少时可以代替 <code>find</code>。使用 <code>**/</code> 来递归搜索</li><li>扩展环境变量，输入环境变量然后按 就可以转换成表达的值</li><li>在 .zshrc 中添加 <code>setopt HIST_IGNORE_DUPS</code> 可以消除重复记录，也可以利用<code>sort -t &quot;;&quot; -k 2 -u ~/.zsh_history | sort -o ~/.zsh_history</code>手动清除</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li><a href="https://github.com/Michael728/my-config-files" target="_blank" rel="noopener">Github-Michael728/my-config-files</a> 附上我的配置文件地址；</li><li><a href="https://michael728.github.io/2018/03/11/tools-zsh-tutorial/" target="_blank" rel="noopener">zsh+on-my-zsh配置教程指南</a> 本文地址</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/wting/autojump" target="_blank" rel="noopener">wting/autojump–官方文档</a></li><li><a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">powerline/fonts</a></li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li><a href="http://macshuo.com/?p=676" target="_blank" rel="noopener">终极 Shell</a></li><li><a href="https://www.cnblogs.com/EasonJim/p/7863099.html" target="_blank" rel="noopener">Ubuntu 16.04下安装zsh和oh-my-zsh</a></li><li><a href="https://www.jianshu.com/p/9a5c4cb0452d" target="_blank" rel="noopener">Ubuntu 下安装oh-my-zsh</a></li><li><a href="https://juejin.im/entry/5b46b268f265da0f793a5ae1" target="_blank" rel="noopener">掘金-Shell 中的极品– Zsh</a></li><li><a href="http://blog.csdn.net/huangbo10/article/details/50930002" target="_blank" rel="noopener">CentOS 7下autojump无法使用的可能原因</a></li><li><a href="http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html" target="_blank" rel="noopener">oh-my-zsh配置你的zsh提高shell逼格终极选择</a></li></ul><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><ul><li><a href="https://hufangyun.com/2017/zsh-plugin/" target="_blank" rel="noopener">zsh oh-my-zsh 插件推荐</a></li><li><a href="http://wdxtub.com/2016/02/18/oh-my-zsh/" target="_blank" rel="noopener">zsh 全程指南-推荐</a></li><li><a href="https://iterm2colorschemes.com/" target="_blank" rel="noopener">iterm主题下载</a></li><li><a href="https://xiaozhou.net/learn-the-command-line-iterm-and-zsh-2017-06-23.html" target="_blank" rel="noopener">程序员内功系列–iTerm与Zsh篇</a></li><li><a href="https://www.dreamxu.com/mac-terminal/" target="_blank" rel="noopener">Mac 下配置终端环境 iTerm2 + Zsh + Oh My Zsh + tmux</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zsh </tag>
            
            <tag> linux </tag>
            
            <tag> oh-my-zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro+i3配置:持续更新</title>
      <link href="/2020/030915622.html"/>
      <url>/2020/030915622.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Manjaro</code> 是一款基于 <code>Arch Linux</code> 的发行版，拥有 <code>Arch Linux</code> 的所有优点，同时更注重用户友好性和可访问性。</p><h2 id="1-安装系统"><a href="#1-安装系统" class="headerlink" title="1.  安装系统"></a>1.  安装系统</h2><hr><h3 id="1-1-准备"><a href="#1-1-准备" class="headerlink" title="1.1 准备"></a>1.1 准备</h3><h4 id="1-1-1-下载镜像"><a href="#1-1-1-下载镜像" class="headerlink" title="1.1.1 下载镜像"></a>1.1.1 下载镜像</h4><p><a href="https://www.manjaro.org/" target="_blank" rel="noopener">manjaro官网</a></p><p><img src="https://i.loli.net/2020/03/09/kux8CLvAydjnRD4.png" alt="2020-03-09 15-17-58屏幕截图.png"></p><p>在社区版中找到<a href="https://www.manjaro.org/download/community/i3/" target="_blank" rel="noopener">i3版本</a> </p><h4 id="1-1-2-安装介质"><a href="#1-1-2-安装介质" class="headerlink" title="1.1.2 安装介质"></a>1.1.2 安装介质</h4><p>使用<a href="rufus.ie">Rufus</a>刻录到 <code>U盘</code></p><ul><li><input disabled="" type="checkbox"> 同时间我在进行windows,linux,黑苹果三系统引导，之后再写</li></ul><h3 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h3><h4 id="1-2-1-安装引导"><a href="#1-2-1-安装引导" class="headerlink" title="1.2.1 安装引导"></a>1.2.1 安装引导</h4><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f31f44c34fe76b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="安装"></p><p><code>driver</code>选择<code>nofree</code>，选择闭源驱动安装</p><p>其他选项暂时不用改变，因为我发现改了也没多大用处</p><h4 id="1-2-2-区域设置"><a href="#1-2-2-区域设置" class="headerlink" title="1.2.2 区域设置"></a>1.2.2 区域设置</h4><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f31f44c489a0a4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="区域设置"></p><p>社区版中并没有带有中文字体，因此选择中文会导致显示异常</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f31f44c4978d6d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="时区"></p><h3 id="1-2-3-键盘设置"><a href="#1-2-3-键盘设置" class="headerlink" title="1.2.3 键盘设置"></a>1.2.3 键盘设置</h3><p>默认即可</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f31f44c48bb249?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="键盘设置"></p><h4 id="1-2-4-分区设置"><a href="#1-2-4-分区设置" class="headerlink" title="1.2.4 分区设置"></a>1.2.4 分区设置</h4><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f31f44c4a2b29e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="分区设置"></p><p>此处图使用的是别人的图，由于安装三系统的需要，这里选择<code>Manual partitioning</code>自定义安装</p><p>挂载点设置</p><p><strong>/根目录</strong>30G左右 格式etx4</p><p><strong>/home</strong>用户home目录，需要较大的空间，我分配了64G 格式  另外分出home的原因是为了避免重装需要备份文件。重装时只用一样挂载原有的/home分区，只要不格式化就可以了。 格式 <strong>etx4</strong></p><p><strong>/boot/efi</strong>操作系统内核和启动所需文件位置，300M左右 <strong>fat32</strong> <strong>格式</strong>  flag选项勾上boot标签。</p><p><strong>/swap</strong>交换分区，这里设置了8G，类似虚拟内存的作用。</p><h4 id="1-2-5-办公软件安装"><a href="#1-2-5-办公软件安装" class="headerlink" title="1.2.5 办公软件安装"></a>1.2.5 办公软件安装</h4><p>这里选择不安装，之后选择<code>WPS</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f31f44eb7917da?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="办公软件"></p><h4 id="1-2-6-确认配置"><a href="#1-2-6-确认配置" class="headerlink" title="1.2.6 确认配置"></a>1.2.6 确认配置</h4><h4 id="1-2-7-开始安装"><a href="#1-2-7-开始安装" class="headerlink" title="1.2.7 开始安装"></a>1.2.7 开始安装</h4><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f31f44f7e76f9e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="开始安装"></p><p>安装过程中需要联网，网线与wifi皆可，wifi在右下角设置</p><h4 id="1-2-8-完成安装-重启进入系统"><a href="#1-2-8-完成安装-重启进入系统" class="headerlink" title="1.2.8 完成安装,重启进入系统"></a>1.2.8 完成安装,重启进入系统</h4><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f31f44fabe85e6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="重启"></p><h2 id="2-安装后的配置"><a href="#2-安装后的配置" class="headerlink" title="2. 安装后的配置"></a>2. 安装后的配置</h2><hr><h4 id="2-1-1-配置国内源"><a href="#2-1-1-配置国内源" class="headerlink" title="2.1.1 配置国内源"></a>2.1.1 配置国内源</h4><pre class=" language-zsh"><code class="language-zsh">sudo pacman-mirrors -i -c China -m rank</code></pre><p>选择国内源，选择一个即可，这里我选择的<code>清华源</code></p><p>查看确认选择的国内源，并同步数据源</p><pre class=" language-zsh"><code class="language-zsh">sudo vim /etc/pacman.d/mirrorlistsudo pacman -Syy</code></pre><h4 id="2-1-2-配置-Archlinuxcn-源"><a href="#2-1-2-配置-Archlinuxcn-源" class="headerlink" title="2.1.2 配置 Archlinuxcn 源"></a>2.1.2 配置 <code>Archlinuxcn</code> 源</h4><p>编辑 <code>/etc/pacman.conf</code>文件</p><pre class=" language-zsh"><code class="language-zsh">sudo vim /etc/pacman.conf</code></pre><p>在文件末尾添加：</p><pre class=" language-zsh"><code class="language-zsh">[archlinuxcn]SigLevel = Optional TrustedOnly#清华源Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</code></pre><p>安装<code>archlinuxcn-keyring</code>包导入<code>GPG key</code>并更新系统</p><pre class=" language-zsh"><code class="language-zsh">sudo pacman -S archlinuxcn-keyringsudo pacman -Syyu</code></pre><h4 id="2-1-2-系统语言设置"><a href="#2-1-2-系统语言设置" class="headerlink" title="2.1.2 系统语言设置"></a>2.1.2 系统语言设置</h4><p>安装中文字体</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S wqy-microhei wqy-zenhei</code></pre><p>i3功能键<code>mod</code> 默认是<code>win</code>键</p><p>方法一: mod+D 输入 <code>manjaro-settings-manager</code>  local language在zh_CN上右键，设置为默认显示语言与格式</p><h4 id="2-1-3-修改-i3默认配置"><a href="#2-1-3-修改-i3默认配置" class="headerlink" title="2.1.3 修改 i3默认配置"></a>2.1.3 修改 <code>i3</code>默认配置</h4><p>官方地址<a href="i3wm.org">i3wm.org</a></p><p><code>i3</code>配置文件默认位置 <code>~/.i3/config</code></p><p>修改conky字体大小，就是桌面显示的时钟，同时解决中文显示为方框的异常</p><pre class=" language-zsh"><code class="language-zsh">sudo cp /usr/share/conky/conky_maia /usr/share/conky/conky_maia.bak #备份sudo vim /usr/share/conky/conky_maia</code></pre><p>修改conky.config后的字号，同时用vim的全局替换功能 输入 <code>:%s/Bitstream Vera/anti/</code>统一修改把<code>Bitstream Vera</code>修改为<code>anti</code></p><h4 id="2-1-3-Aur配置"><a href="#2-1-3-Aur配置" class="headerlink" title="2.1.3 Aur配置"></a>2.1.3 <code>Aur</code>配置</h4><p>下载<code>yay</code>源码</p><pre class=" language-git"><code class="language-git">git clone http://aur.archlinux.org/yay.git</code></pre><p>编译，安装</p><pre class=" language-zsh"><code class="language-zsh">cd yaymakepkg -ssudo pacman -U xxx.pkg.tar.xz</code></pre><p>makepkg编译后的文件以<code>pkg.tar.xy</code>结尾 -U参数为本地安装</p><p>检查是否安装成功</p><pre><code>which yay</code></pre><p>更换 <code>aur</code> 源</p><pre><code>yay --aururl &quot;https://aur.tuna.tsinghua.edu.cn&quot; --save</code></pre><p>修改的配置文件位于 <code>~/.config/yay/config.json</code> ，还可通过以下命令查看修改过的配置：</p><pre class=" language-bash"><code class="language-bash">yay -P -g</code></pre><h4 id="2-1-4-科学上网"><a href="#2-1-4-科学上网" class="headerlink" title="2.1.4 科学上网"></a>2.1.4 科学上网</h4><p>安装v2rayA</p><pre class=" language-zsh"><code class="language-zsh">yay v2raya</code></pre><p>配置</p><p>安装chrome进行配置默认网页<a href="https://v2raya.mzz.pub/" target="_blank" rel="noopener">v2ray</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S google-chrome</code></pre><p>chrome 支持命令行配置代理，在无法访问chrome 商店下载 SwitchyOmega 前，可以使用 google-chrome-stable –proxy-server=”socks5://127.0.0.1:1080” <a href="http://www.google.com/" target="_blank" rel="noopener">www.google.com</a> 命令启动进行登录谷歌账号(你需要先设置好ss)</p><p>如果不通，看看系统时间，如果时间不准</p><p>在manjaro-settings-manager中时间与日期中勾选<strong>自动调整时间与日期</strong>和启用<strong>本地硬件时钟</strong></p><h4 id="2-1-5-安装zsh-shell"><a href="#2-1-5-安装zsh-shell" class="headerlink" title="2.1.5 安装zsh shell"></a>2.1.5 安装zsh shell</h4><p>zsh比默认的bash提供了更多的功能和更丰富的样式</p><pre class=" language-zsh"><code class="language-zsh">sudo pacman -S zsh#brew install zsh mac#yum install zsh centos#apt-get install zsh ubuntu</code></pre><p>先查看<code>zsh</code>的安装位置</p><pre class=" language-zsh"><code class="language-zsh">which zsh</code></pre><p>一般来说返回的应该是<code>/usr/bin/zsh</code></p><p>切换shell</p><pre class=" language-zsh"><code class="language-zsh">chsh -s /usr/bin/zsh</code></pre><p>启动<code>zsh</code></p><pre class=" language-bash"><code class="language-bash">zsh</code></pre><p>安装配置<a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener">oh-my-zsh</a>，这是一个<code>zsh</code>的拓展包，提供了更多的插件与样式</p><p>安装,选择一种即可</p><pre class=" language-bash"><code class="language-bash">sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span>sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span></code></pre><p>如果链接被拒绝链接，那就需要在终端中启用http代理</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> http_proxy<span class="token operator">=</span>http://127.0.0.1:端口号</code></pre><h5 id="2-1-5-2主题与扩展"><a href="#2-1-5-2主题与扩展" class="headerlink" title="2.1.5.2主题与扩展"></a>2.1.5.2主题与扩展</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> ~/.oh-my-zsh/themes <span class="token comment" spellcheck="true">#查看有的主题</span>vim ~/.zshrc<span class="token comment" spellcheck="true">#找到ZSH_THEME</span><span class="token comment" spellcheck="true">#改为找到的主题</span></code></pre><p>扩展</p><p>以下需要额外安装</p><p><strong>zsh-autosuggestions</strong>自动补全 会显示以前输入的命令 按键盘左箭头就可以补全</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git://github.com/zsh-users/zsh-autosuggestions <span class="token variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</code></pre><p><strong>zsh-syntax-highlighting</strong>代码高亮</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="token variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-syntax-highlighting</code></pre><p>最后在~/.zshrc中设置启用</p><p>我目前设置为</p><pre class=" language-bash"><code class="language-bash">plugins<span class="token operator">=</span><span class="token punctuation">(</span>git z zsh-syntax-highlighting zsh-autosuggestions extract web-search<span class="token punctuation">)</span></code></pre><p><strong>web-search</strong>是一个能在终端中网页搜索的插件 例：：baidu XXXX 或 google XXXX</p><p><strong>z</strong>是autojump中分离出来自带在oh-my-zsh中的自动跳转</p><p><code>z XXX目录</code>不用打全，他会根据权重进行模糊匹配和自动补全</p><p><strong>extract</strong></p><p>解压文件用的，所有的压缩文件，都可以直接<code>x filename</code>，不用记忆参数</p><p>当然，如果你想要用<code>tar</code>命令，可以使用<code>tar -</code>加<code>tab</code>键，zsh会列出参数的含义.</p><h4 id="2-1-6-配置输入法"><a href="#2-1-6-配置输入法" class="headerlink" title="2.1.6 配置输入法"></a>2.1.6 配置输入法</h4><p>修改语言中文支持</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/locale.gen</code></pre><p>加入 <code>en_US.UTF-8</code> <code>zh_CN.UTF-8</code></p><p>重新加载 <code>locale</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> locale-gen</code></pre><p>修改全局 <code>locale</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/locale.conf</code></pre><p>加入 <code>LANG=en_US.UTF-8</code> ,这里设置中文,易使 <code>tty</code> 乱码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S fcitx fcitx-configtool fcitx-gtk2 fcitx-gtk3 fcitx-googlepinyin fcitx-cloudpinyin fcitx-gt5</code></pre><p>这里选择的是谷歌拼音还有云拼音插件。</p><p>配置fcitx</p><p>在<code>~/.xprofile</code>加入<code>fcitx</code>支持</p><pre class=" language-bash"><code class="language-bash">vim ~/.xprofile</code></pre><p>加入下面内容</p><pre class=" language-visual"><code class="language-visual">#fcitxexport GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS="@im=fcitx"</code></pre><p>在i3配置中设置开机启动</p><pre class=" language-bash"><code class="language-bash">vim ~/.i3/config</code></pre><p>加入</p><pre class=" language-bash"><code class="language-bash">exec_always --no-startup-id fcitx</code></pre><p>这里的<code>--no-startup-id</code>是因为i3启动每个程序时会使鼠标进入60秒忙碌状态，这样设置可以取消</p><p>保存退出 mod+shift+r重新启动i3就能在i3status中看到fcitx图标了</p><p>fcitx配置中选择输入法</p><h2 id="3-常用软件安装"><a href="#3-常用软件安装" class="headerlink" title="3. 常用软件安装"></a>3. 常用软件安装</h2><hr><h4 id="3-1-1-必备使用"><a href="#3-1-1-必备使用" class="headerlink" title="3.1.1 必备使用"></a>3.1.1 必备使用</h4><p><em><code>alacritty</code> :免费的开源，快速，跨平台的终端仿真器</em>  须在i3配置中将mod+return原先跟着的改为alacritty</p><p><code>thefuck</code> : thefuck初始化,输错命令有问题直接键入<code>fuck</code></p><p><code>albert</code>： 一款文件软件搜索启动器 如fcitx添加i3开机启动 第一次启动会提示设置快捷键 alt+space extension中勾选applications, bookmarks书签, files, hash-generator, system, terminal, websearch</p><p><code>gnome-screenshot</code>:  截图工具 在i3中添加新快捷键 启动 例：bindsym $mod+Shift+a exec gnome-screenshot -i</p><p>variety: 更换壁纸 设置开机启动</p><p>compton:设置窗口半透明与毛玻璃特效 需要下载另外的compton</p><p><code>ranger</code>：文件管理器</p><p><code>code</code>: 编辑器</p><h4 id="3-1-2-网络"><a href="#3-1-2-网络" class="headerlink" title="3.1.2 网络"></a>3.1.2 网络</h4><p>先卸载默认安装的Pale Moon浏览器</p><p><code>google-chrome</code> 浏览器 后文写了遇到无法设置默认浏览器的状况</p><p><code>v2ray</code>前面介绍了</p><h4 id="3-1-3-娱乐"><a href="#3-1-3-娱乐" class="headerlink" title="3.1.3 娱乐"></a>3.1.3 娱乐</h4><p><code>iease-music</code> :网易云音乐第三方客户端</p><h4 id="3-1-4-自娱自乐"><a href="#3-1-4-自娱自乐" class="headerlink" title="3.1.4 自娱自乐"></a>3.1.4 自娱自乐</h4><p><code>neofetch</code> 个性化显示Linux系统信息的工具</p><p>可在~/.zshrc中添加别名 alias s=”neofetch”</p><h4 id="3-1-5-办公文字"><a href="#3-1-5-办公文字" class="headerlink" title="3.1.5 办公文字"></a>3.1.5 办公文字</h4><p><code>wps-office</code> 字体需要安装ttf-wps-fonts</p><p><code>calibre</code>： 图书管理和阅读软件</p><h2 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4. 常见问题"></a>4. 常见问题</h2><h4 id="4-1-1-解除声道静音-默认安装alsa默认静音"><a href="#4-1-1-解除声道静音-默认安装alsa默认静音" class="headerlink" title="4.1.1 解除声道静音 默认安装alsa默认静音"></a>4.1.1 解除声道静音 默认安装alsa默认静音</h4><pre class=" language-bash"><code class="language-bash">alsamixer</code></pre><p>在<code>alasmixer</code>中, 标有MM声道是静音的，标有00通道已启用。 M键是打开关闭的键</p><p>设置完成后</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> alsactl store <span class="token comment" spellcheck="true">#保存设置</span></code></pre><ul><li><input disabled="" type="checkbox"> 暂时无法解决pulseaudio与alsa共存问题</li><li><input disabled="" type="checkbox"> 启用蓝牙时遇到无法连接的问题,安装pulseaudio-blutooth重启后再卸载。问题解决。原因不清。</li><li><input disabled="" type="checkbox"> 扬声器与耳机自动切换问题也没有找到解决方法, 暂时只能一直将扬声器静音。</li></ul><h4 id="4-1-2-chrome默认浏览器问题"><a href="#4-1-2-chrome默认浏览器问题" class="headerlink" title="4.1.2 chrome默认浏览器问题"></a>4.1.2 chrome默认浏览器问题</h4><p>系统默认浏览器设置为chrome，可从<code>mod+z--&gt;settings--&gt;preferred applications</code>中选择，如果不成功，也可编辑<code>.profile</code>文件，加入<code>export BROWSER=/usr/bin/google-chrome-stable</code>，同时编辑<code>~/.congfig/mimeapps.list</code>文件，修改为<code>google-chrome.desktop</code></p><h4 id="4-1-3-vsoce不认修改的键位问题"><a href="#4-1-3-vsoce不认修改的键位问题" class="headerlink" title="4.1.3 vsoce不认修改的键位问题"></a>4.1.3 vsoce不认修改的键位问题</h4><h2 id="5-个人需要的软件安装"><a href="#5-个人需要的软件安装" class="headerlink" title="5. 个人需要的软件安装"></a>5. 个人需要的软件安装</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S typora<span class="token function">sudo</span> pacman -S android-tools<span class="token function">sudo</span> pacman -S scrcpy adb<span class="token function">sudo</span> pacman -S openbsd-netcat github-ssh代理<span class="token function">sudo</span> pacman -S gedit<span class="token function">sudo</span> pacman -S <span class="token function">npm</span> <span class="token comment" spellcheck="true">#nodejs包管理器</span><span class="token function">sudo</span> pacman -S Node<span class="token function">sudo</span> pacman -S gdb <span class="token comment" spellcheck="true">#C调试</span><span class="token function">sudo</span> pacman -S calibre<span class="token function">sudo</span> pacman -S ttf-wps-fonts  wps-office-mui-zh-cn<span class="token function">sudo</span> pacman -S appimagelauncher<span class="token function">sudo</span> pacman -S timeshift <span class="token comment" spellcheck="true">#备份软件</span><span class="token function">sudo</span> pacman -S ttf-dejavu ttf-dejavu-sans-mono-powerline ttf-fira-code ttf-fira-mono<span class="token function">sudo</span> pacman -S asciidoc<span class="token function">sudo</span> pacman -S wqy-bitmapfont wqy-microhei-lite<span class="token function">sudo</span> pacman -S xorg-docs xorg-fonts-100dpi xorg-fonts-75dpi xorg-iceauth xorg-luit xorg-server xorg-server-common xorg-server-xephyr xorg-server-xnest xorg-server-xvfb xorg-server-xwayland xorg-sessreg xorg-setxkbmap xorg-smproxy xorg-x11perf xorg-xauth xorg-xbacklight xorg-xcmsdb xorg-xcursorgen xorg-xdriinfo xorg-xdpyinfo xorg-xev xorg-xgamma xorg-xhost xorg-xinit xorg-xinput xorg-xkbevd xorg-xkbutils xorg-xkill xorg-xlsatoms xorg-xmodmap xorg-xrandr xorg-xrdb xorg-xrefresh xorg-xset xorg-xsetroot xorg-xvinfo xorg-xwd xorg-xwininfo xorg-xwud<span class="token function">sudo</span> pacman -S nerd-fonts-complete<span class="token function">sudo</span> pacman -S gnome-themes-extra <span class="token comment" spellcheck="true">#解决缺少await引擎问题</span><span class="token function">sudo</span> pacman -S gnome-themes-maia<span class="token function">sudo</span> pacman -S arc-icon-theme<span class="token function">sudo</span> pacman -S  adapta-gtk-theme  adobe-source-serif-pro-fonts</code></pre><h2 id="后言：具体软件配置决定另外再写。"><a href="#后言：具体软件配置决定另外再写。" class="headerlink" title="后言：具体软件配置决定另外再写。"></a>后言：具体软件配置决定另外再写。</h2>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> Linux </category>
          
          <category> i3wm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> i3wm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客配置(持续更新)</title>
      <link href="/2020/030948089.html"/>
      <url>/2020/030948089.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Manjaro是一款基于<strong>Arch Linux</strong>、对用户友好、全球排名第一的Linux发行版。<br>使用了一段时间的Manjaro决定将其作为自己的主力系统，因此想把原来的Hexo部署在Manjaro下，同时记录下github、gitee静态网页还有最近白嫖的半年服务器上的配置。</p><h3 id="所需软件安装"><a href="#所需软件安装" class="headerlink" title="所需软件安装"></a>所需软件安装</h3><pre class=" language-zsh"><code class="language-zsh">$sudo pacman -S npm #安装npm nodejs的包管理器$sudo npm install -g hexo-cli #安装hexo</code></pre><h3 id="本地博客目录建立"><a href="#本地博客目录建立" class="headerlink" title="本地博客目录建立"></a>本地博客目录建立</h3><pre class=" language-zsh"><code class="language-zsh">$mkdir hexo #创建hexo的本地根目录, 文件夹必须为空$cd hexo$hexo init . #hexo初始化，从github下载所需组件$hexo server #启动hexo， 执行后打开http://localhost:4000/  检查是否初始化成功</code></pre><p>修改<code>_config.yml</code>自定义</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 网页标题<span class="token key atrule">author</span><span class="token punctuation">:</span> 作者名<span class="token comment" spellcheck="true">#URL</span><span class="token key atrule">url</span><span class="token punctuation">:</span> 目前看来只要填一个静态页面网站的根目录就行了 例如https<span class="token punctuation">:</span>//ID.gitee.io/<span class="token key atrule">root</span><span class="token punctuation">:</span> / 仓库根目录的位置.否则此处要填"/仓库名"， 那样github就无法正常访问了。为了两者都可以正常访问，只能gitee需要将仓库名改为与用户名相同才能像github一样使用一级域名。否则会出现样式异常。</code></pre><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>在<a href="hexo.io/themes">hexo</a>官网挑选一个喜欢的主题</p><p>安装方法：</p><pre class=" language-zsh"><code class="language-zsh">$ git clone https://github.com/blinkfox/hexo-theme-matery.git themes/hexo-theme-matery在hexo根目录下执行这条命令</code></pre><p>启用：<br>修改hexo根目录下的<code>_config.yml</code></p><pre class=" language-yml"><code class="language-yml">theme: hexo-theme-matery</code></pre><h3 id="主题功能自定义"><a href="#主题功能自定义" class="headerlink" title="主题功能自定义"></a>主题功能自定义</h3><h3 id="github静态页面部署"><a href="#github静态页面部署" class="headerlink" title="github静态页面部署"></a>github静态页面部署</h3><h4 id="1-注册Github帐号"><a href="#1-注册Github帐号" class="headerlink" title="1. 注册Github帐号"></a>1. 注册Github帐号</h4><ol><li>新建项目，如图所示</li></ol><p><img src="https://i.loli.net/2020/03/26/T78cH9zeaLoFAVi.png" alt="create_repository.png"></p><ol start="2"><li>输入项目名，后缀一定为<code>.github.io</code><br>建议项目名与帐号名相同，这样可以使用一级域名 勾选初始化README</li></ol><p>   <img src="https://i.loli.net/2020/03/26/XoKG97M6FbVvEpf.png" alt="creat_new_repository.png"></p><ol start="3"><li>项目页面点击settings 下拉有<code>Github Pages</code>, <code>Source</code>改为<code>master branch</code></li></ol><p><img src="https://i.loli.net/2020/03/26/X9fP5724UeyijNH.png" alt="github_pages.png"></p><p>   ，点击<code>Choose a theme</code>选择主题。<br>4. 一会后回到<code>Github Pages</code> 会出现一个链接</p><p><img src="https://i.loli.net/2020/03/26/4ZWTpkU7ntJE6sS.png" alt="2020-03-26 09-05-04屏幕截图.png"></p><h4 id="2-与Github通过ssh通信"><a href="#2-与Github通过ssh通信" class="headerlink" title="2. 与Github通过ssh通信"></a>2. 与Github通过ssh通信</h4><ul><li><p>连接github与本地<br>命令行中输入</p><pre class=" language-git"><code class="language-git">gti config --global user.name <span class="token string">"yourname"</span>git config --global user.email <span class="token string">"youremail@xx"</span></code></pre><p>邮箱与用户名根据github注册信息自行修改</p></li><li><p>生成SSH Key密钥 为避免每次上传时输入帐号密码</p><pre class=" language-git"><code class="language-git">ssh-keygen -t rsa -c <span class="token string">"youremail@xx"</span></code></pre></li><li><p>github个人主页，头像下点击<code>setting</code>，<code>SSH and GPG keys</code>,新建ssh，名字无所谓</p><p>  <img src="https://i.loli.net/2020/03/26/GeURkv6BJ2PXdo4.png" alt="key"><br>  <img src="https://i.loli.net/2020/03/26/LD8YHjWkup5Ov1d.png" alt="newssh.png"></p><p>  命令行输入<code>cat ~/.ssh/id_rsa.pub</code><br>  <img src="https://i.loli.net/2020/03/26/3dcm6BrJ825ACy1.png" alt="key.png"><br>  将输出内容复制至刚刚的github页面内,最后一行建议回车一下，留出一个空行,确认保存<br>  输入<code>ssh -T git@github.com</code>,出现如图所示即已经成功<br>  <img src="https://i.loli.net/2020/03/26/vcWZ2xC9NflmXiM.png" alt="2020-03-26 09-27-15屏幕截图.png"></p></li><li><p>config.yml配置<br>  先在github仓库页面，<code>clone or  download</code>复制git链接，这里选择的ssh协议，当然https也是可以的</p><p>  <img src="https://i.loli.net/2020/03/26/o32GPZAkslw9Tma.png" alt="2020-03-26 09-35-07屏幕截图.png"></p><p>  打开编辑博客根目录下的<code>_config.yml</code>,修改最后一行的配置<br>  <img src="https://i.loli.net/2020/03/26/8zRepI74Cg2xLvX.png" alt="2020-03-26 09-31-09屏幕截图.png"></p><pre class=" language-yml"><code class="language-yml">deploy:type: gitrepo:   github: git@github.com:yourname/yourname.github.io.git   coding: git@e.coding.net:yourname/yourname.git   gitee: git@gitee.com:yourname/yourname.git   server: git@xxx.xx.xx.xx/var/repo/hexo.gitbranch: master</code></pre><p>除去github的那行以外是其他网站的静态页面设置与服务器的设置，下面还有两次部署，步骤大多一样，就不重复了</p></li><li><p>上传<br>博客根目录下安装hexo-deployer-git<br><code>npm i hexo-deployer-git</code><br>输入`hexo new post “article title”,新建文章</p></li></ul><p>然后打开博客根目录/source/_posts会发现多了一个<code>.md</code>文件</p><p>每次写完markdown文件后，博客根目录下 执行<code>hexo generate</code>生成静态网页， 执行<code>hexo server</code>本地预览，<code>hexo deploy</code>上传至github,此时打开github上所创建的静态页面的网址就可以看到发布的文章了。</p><h3 id="gitee静态页面部署"><a href="#gitee静态页面部署" class="headerlink" title="gitee静态页面部署"></a>gitee静态页面部署</h3><p>过程与github页面类似，要注意的是要让仓库的等级与github上一致，即如果github上是使用与用户名相同的仓库时，gitee上也要创建与用户名相同的路径，否则会遇到上传读取的路径冲突的问题。<br><img src="https://i.loli.net/2020/03/26/2D3eAOJG1qn58yd.png" alt="常见问题.png"></p><ul><li>ssh公钥</li></ul><p><img src="https://i.loli.net/2020/03/26/4HGYFkq2oJvdyCz.png" alt="settings.png"></p><p><img src="https://i.loli.net/2020/03/26/V91C6MaXKkit5rE.png" alt="2020-03-26 09-49-00屏幕截图.png"><br><img src="https://i.loli.net/2020/03/26/MkiVbQDXEnJFIw7.png" alt="2020-03-26 09-49-23屏幕截图.png"></p><ul><li><p>config.yml配置</p><p>  配置同github上的</p><p>  <img src="https://i.loli.net/2020/03/26/8zRepI74Cg2xLvX.png" alt="2020-03-26 09-31-09屏幕截图.png"></p></li><li><p>上传</p><h3 id="云服务器部署"><a href="#云服务器部署" class="headerlink" title="云服务器部署"></a>云服务器部署</h3></li><li><p>服务器配置信息<br>服务器为centos 包管理软件为yum 通过ssh连接</p></li><li><p>所需软件</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span> httpd PHP <span class="token comment" spellcheck="true">#centos</span>apt get <span class="token function">install</span> <span class="token function">git</span> apache PHP Mysql <span class="token comment" spellcheck="true">#ubuntu</span></code></pre></li><li><p><em>httpd*</em> 等同 <strong>apache</strong><br>由于centos自带的yum中默认不包含MySQL，所以需要先去<a href="https://dev.mysql.com/downloads/repo/yum/?utm_source=hacpai.com" target="_blank" rel="noopener">MySQL官网</a></p></li></ul><p>下载完成后使用文件传输软件或者scp命令拷贝至服务器</p><pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> mysql80-community-release-el7-3.noarch.rpm root@1.1.1.1:/usr/local/mysql/</code></pre><p><img src="https://img.hacpai.com/file/2019/06/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE2-3585c224.png?imageView2/2/interlace/1/format/jpg" alt="repo"><br>传输完成后在服务器中安装repo源，并更新缓存</p><pre class=" language-bash"><code class="language-bash">rpm -ivh mysql80-community-release-el7-3.noarch.rpmyum clean allyum makecache</code></pre><p>由于 MySQL 镜像位于国外服务器，可能该步以及后续下载会较慢，建议可以使用<a href="https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql80-community-el7/?utm_source=hacpai.com" target="_blank" rel="noopener">清华大学开源镜像</a>网站替换（该命令仅会下载 community-server 包，其他包的安装依旧需要执行之前安装 repo 源的命令）。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql80-community-el7/mysql-community-server-8.0.16-2.el7.x86_64.rpm</code></pre><p><img src="https://img.hacpai.com/file/2019/06/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE3-7c05bdef.png?imageView2/2/interlace/1/format/jpg" alt="mirror"></p><ul><li>ssh公钥信任</li></ul><p>将主机的ssh公钥添加至服务器<br>即复制主机<code>~/.ssh/id_ras.pub</code>的内容到服务器<code>root/.ssh/authorized_keys</code>文件中</p><ul><li>git仓库建立<ul><li>创建专用于git的用户git<pre class=" language-bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token function">git</span><span class="token function">passwd</span> <span class="token function">git</span></code></pre></li></ul></li></ul><p><img src="https://pic3.zhimg.com/80/v2-70c45380cf606d9de2b8085c060fe3ee_720w.jpg" alt="creat_gituser"></p><ul><li><p>创建空仓库<br>创建一个名为blog空仓库并把所有权给git用户</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /var/repo/<span class="token function">cd</span> /var/repo<span class="token function">git</span> init --bare hexo.git</code></pre><ul><li>配置 GITHOOKS<pre class=" language-bash"><code class="language-bash">vim /var/repo/hexo.git/hooks/post-receive</code></pre>添加<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#！/bin/sh</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/var/www/html --git-dir<span class="token operator">=</span>/var/repo/hexo.git checkout -f</code></pre>保存退出，设置权限<pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x /var/repo/hexo.git/hooks/post-receive</code></pre>改变hexo.git目录的拥有者为git用户<pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> -R git:git hexo.git</code></pre></li></ul></li><li><p>创建静态文件目录并将git仓库链接到静态文件目录下</p><ul><li><p>创建静态文件目录（文章目录）:<code>mkdir /var/www/html</code> 一般默认html已经存在<br>删除重建即可</p></li><li><p>链接git仓库： <code>chown -R git:git /var/www/html</code></p></li><li><p>配置权限： chmod -R 755 /var/www/html</p></li></ul><p>这样git仓库更新便会自动同步到html目录下</p></li><li><p>上传deployer<br>修改主机上hexo根目录_config.yml</p></li></ul><p>在deployer内添加一行server行<br><img src="https://i.loli.net/2020/03/26/8zRepI74Cg2xLvX.png" alt="2020-03-26 09-31-09屏幕截图.png"></p><p>根目录下执行hexo g &amp;&amp; hexo d 上传博客内容</p><p>至此结束</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> blog </tag>
            
            <tag> manjaro </tag>
            
            <tag> linux </tag>
            
            <tag> github </tag>
            
            <tag> gitee </tag>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
